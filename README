
	$Id$

PREFACE

  This is a general guide for the OPeNDAP data servers. The server software
  is split between two functions. This part of the software provides the
  general capabilities of the server such as basic request handling. The
  server also uses one or more 'handlers' for each specific data format.
  Those handlers are available as separate items from our web site or from
  other sites.

  Version 3.5 of the server, described in this file, differs in some
  inportant ways from previous versions of the server. In version 3.5 only
  one file is located in a web daemon's CGI binary directory. In addition,
  it's no longer necessary to located the data in your web daemon's
  DocumentRoot directory. Both of these changes increase server robustness.

  Though not absolutely essential, it will be useful to understand the
  structure of the software. You can find general descriptions of the system
  and how the pieces fit together in the User's Guide, available from the
  OPeNDAP home page: http://www.opendap.org/.

  This file describes how to use the software once it has been built and
  installed. For instructions on the build and/or installation process, see
  the file INSTALL.

  See NEWS for recent changes to the server software.

  Updated for version 3.5 of the OPeNDAP Server Software.

-----------------------------------------------------------------------------

CONTENTS

Introduction

About WWW Servers

Setting Up a Data Server
Quick Instructions
Serving Compressed Files 
More Sophisticated Installation
  Usage information
  Logging accesses

Server Installation Tips
  Tip 1: Which directory is the cgi-bin directory?
  Tip 2: Which directory is used by your WWW server as the document root?
  Tip 3: How can I avoid copying all my data into the document root?
  Tip 4: How do I write a URL for some archive's data?
  Tip 5: How do I add additional descriptive information about my dataset?
  Tip 6: How do I set up a server that limits access to only a few people?
  Tip 7: Is there a registry of datasets?
  Tip 8: Customizing the DODS Directory response (from Joe McLean)

More Questions

-----------------------------------------------------------------------------

Introduction

  This is the base software for the OPeNDAP data server. It uses the CGI 1.1
  protocol and requires Apache or a similar web daemon.

  The software here includes three C++ programs which are installed in
  <prefix>/sbin and a collection of Perl software install in
  <prefix>/share/dap-server. Finally, the Perl script nph-dods, it's
  configuration file dap-server.rc and the HTML interface help file
  dods_form_help.html are also here. These last three files are installed in
  the HTTP daemon's CGI binaries directory (you can use the default cgi-bin
  or set up a new one). Thus the bulk of the fles used to process a DAP
  request are not actually in the CGI directory.

-----------------------------------------------------------------------------

About WWW Servers

  We have extensively tested the servers with the Apache HTTP daemon (httpd).
  Other servers will work as along as they support CGI 1.1 standard. However,
  the installation instructions will be slightly different. Don't let this
  dissuade you from installing the servers with another httpd - the process
  is very simple. Other groups have used the NCSA, CERN and Netscape web
  servers successfully.

  If you do not have a World Wide Web server running on the machine you want
  to use as your data server machine, you can The Apache daemon can be found
  at http://www.apache.org/.

-----------------------------------------------------------------------------

Setting Up a Data Server

Quick Instructions

  First build and install the Server Base Software. See the file INSTALL. You
  may be able to install a binary package and skip the build step.

  Once the Base has been installed, you're ready to configure the software
  and add one or more data source handlers. The base software does not
  include any handlers (each is available as a separate package) so we'll use
  the NetCDF File handler as an example in this document.

  To configure the server you must copy the files nph-dods, dap-server.rc and
  dods_form_help.html from the directory $prefix/share/dap-server to a CGI
  Binary directory for your web daemon. See SERVER INSTALLATION TIPS section
  below for help on how to locate your web server's CGI Binary diretcory.
  Make sure that the nph-dods script is exectuable.

  Previous version of the OPeNDAP server required that data either be stored
  in your web daemon's DocumentRoot or one of its subdirectories or be
  symbolically linked so that it appeared so (and in the later case a special
  option had to be set for the Apache web daemon). However, the version 3.5
  server provides an option whereby the data location can be set using the
  data_root parameter of the dap_server.rc file. See below under "The
  dap_server.rc Configuration File" for details. Note that the old behavior
  where data are located in or under DocumentRoot is still supported. Also
  note that the OPeNDAP server's directory browsing functions don't currently
  work when using data_root.

  For more details on server installation, see the SIMPLE INSTALLATION
  section below.

The dap-server.rc Configuration File

  The dap-server.rc configuration file is used to tailor the server to your
  site. The file contains a handful of parameters plus the mappings between
  different data sources (typically files, although that doesn't have to be
  the case) and hander-programs. The format of the configuration files is:
  
     <parameter> <value> ... <value>

  The configuration file is line-oriented, with each parameter appearing on
  its own line. Blank lines are ignored and the '#' character is used to
  begin comment lines. Comments have to appear on lines by themselves (you
  cannot tack a comment on to the end of a line that contains a parameter).

  The parameters recognized are:

  data_root <path>

  Define this if you do not want the server to assume data are located under
  DocumentRoot. The value <path> should be the fully qualified path to the
  directory which you want to use as the root of your data tree. For example,
  we have a collection of netcdf, hdf, et c., files that we store in
  directories named /usr/local/test_data/data/nc,
  /usr/local/test_data/data/hdf, et c., and we set data_root to
  /usr/local/test_data. The value of <path> should _not_ end in a slash.

  Notes: 

  The OPeNDAP server's directory browsing functions do not work when using
  the data_root option. They do still work when locating data under
  DocumentRoot.

  It's not an absolute requirement that this path be a real directory or that
  your data are in 'files.' Data can reside in a relational database, for
  example. In that case the base software will use <path> as a prefix to the
  path part of the URL it receives from the client.).

  timeout <seconds>

  This sets the OPeNDAP server timeout value, in seconds. This is different
  from the httpd timeout. OPeNDAP servers run independently of httpd once the
  initial work of httpd is complete. This ensures that your OPeNDAP server
  does not continue indefinitely if something goes wrong (i.e., a user makes
  a huge request to a database). Default is 0 which means no time out.

  cache_dir <directory>

  When data files are stored in a compressed format such as gzip or UNIX
  compress, the OPeNDAP server first decompresses them and then serves the
  decompressed file. The files are cached as they are decompressed. This
  parameter tells the server where to put that cache. Default: /usr/tmp.

  cache_size <size in MB>

  How much space can the cached files occupy? This value is given in
  MegaBytes. When the total size of all the decompressed files exceeds this
  value, the oldest remaining file will be removed until the size drops below
  the parameter value. If you are serving large files, make *sure* this value
  is at least as large as the largest file. 

  maintainer <email address>

  The email address of the person responsible for this server. This email
  address will be included in many error messages returned by the server.
  Default: support@unidata.ucar.edu.

  curl <path>

  This parameter is used to set the path to the curl executable. The curl
  command line tool is used to dereference URLs when the server needs to do
  so. In some cases the curl exectuable might not be found be the server when
  checks default directories. This can be a source of considerable confusion
  because the CGI program run from a web daemon used a very restricted PATH
  environment variable, much more restricted than a typical user's PATH.
  Thus, even if you, as teh server installer have curl on your PATH, nph-dods
  may not be able to find the program unless you tell it exactly where to
  look.

  exclude <handler> ... <handler>

  This is a list of handlers whose regular expressions should *not* be used
  when building the HTML form interface for this server. In general, this
  list should be empty. However, if you have a handler that is bound to a
  regular expression that is very general (such as .* which will match all
  files), then you should list that handler here, enclosing the name in
  double quotes. See the next item about the 'handler' parameter. Default: by
  default, no handlers are excluded.

  handler <regular expression> <handler name>

  The handler parameter is used to match data sources with particular handler
  programs used by the server. In a typical OPeNDAP server setup, the data
  sources are files and the regular expressions choose handlers based on the
  data file's extension. However, this need not be that case. The OPeNDAP
  server actually matches the entire pathname (starting at the HTTP Document
  Root) of the data source when searching for the correct handler to use. The
  regular expressions are Perl regular expressions; the examples in the
  sample dap-server.rc file should get you going. If you need something ore
  complex, consult a good book on Perl or contact us at
  support@unidata.ucar.edu.

Serving Compressed Files 

  Here is some important configuration information for people serving data
  from compressed files. If your server is not handling compressed files
  correctly, changing the options as described here will likely fix the
  problem.

  When the OPeNDAP software is used to serve compressed files (e.g., files
  compressed using gzip), the files are first decompressed and then stored in
  a cache; data served are read from those cached files. The location of the
  cache directory is /usr/tmp by default. This can be changed by editing
  dap-server.rc and changing the value of cache_dir. The software is set by
  default to limit the size of this directory to 500 MB. However, if you're
  serving large files, or are experiencing a large volume of traffic, you
  should increase this. To do so, edit the value of of the cache_size, also
  in dap-server.rc. The cache size is given in MB, so changing the 500 to
  1000 would increase the cache size from 500MB to 1GB.

  Finally, the decompression software uses the gzip program to do its work.
  If your computer does not have the gzip program in its /bin directory
  you'll need to edit the DODS_Cache.pm so that the correct version of gzip
  is used. Look in that file for "/bin/gzip" and replace that text with the
  correct pathname. To figure out where gzip is on you computer, type 'which
  gzip' in a shell.

More Sophisticated Installation (But Just A Tiny Bit)

  Usage information

  The `usage' program, placed in $prefix/sbin, provides a way for you to
  supply additional information about your dataset that others can browse -
  it generates HTML output. See the User Guide for more information about the
  usage service, including how to add custom information to the returned
  usage message.

  Logging accesses

  Since an HTTP daemon logs all accesses, every access to data through your
  OPeNDAP server is logged. However, to collect information about
  project-wide data use, that information needs to be collated. We have built
  an optional module that scans your daemon's logs for just the information
  about OPeNDAP activity. This feature is disabled by default.

  This optional module provides for remote access to this OPeNDAP-only
  information using the URL 'http://<your host>/<your server>/stats'. The
  information can be accessed by your computer and some computers at Unidata,
  URI and OPeNDAP, using tools like a browser or wget.

  You can configure the remote stat access module by hand fairly
  easily. In the distributions etc directory, edit the file called
  DODS_STATISTICS. This file holds the pathname to you server's access and
  error logs as well as its name. Once you have edited DODS_STATISTICS, copy
  that file to the directory that contains the OPeNDAP server.

  If you are using virtual hosts with the web deamon that runs the OPeNDAP
  server, the remote stats access module can only be configured to provide
  access to one set of log files.

Server Installation Tips

  The following tips are mostly specific to the Apache server.  The NCSA web
  server shares some of the same configuration options, and the advice is
  often transferable.  For other web servers, this advice may be only of
  general, or possibly little, help.

Tip 1: Which directory is the cgi-bin directory?

  Look in the server's `httpd.conf' file for a line like:

    ScriptAlias /cgi-bin/ /var/www/cgi-bin/

  For both the NCSA and Apache servers, the option ScriptAlias defines where
  CGI (Common Interface Gateway) programs may reside. In this case they are
  in the directory /var/www/cgi-bin/. With this script alias in effect, URLs
  with `cgi-bin' in their path will automatically refer to programs in the
  specified directory. You might want to put the OPeNDAP server in its own
  CGI directory name opendap or dap, although that's not a requirement.

Tip 2: Which directory is used by your WWW server as the document root?

  Look in the http.conf file for a line like:

    DocumentRoot /var/www/html

  This says that the document root directory is /var/www/html. URLs that
  contain only the machine name and a file name, such as:
  
    http://test.opendap.org/info.txt

  refer to files in the document root directory.  For example, with the
  above DocumentRoot declaration, and the above URL, the file specified is:

    /var/www/html/info.txt

Tip 3: How can I avoid copying all my data into the document root?  Can't I
  link to it?

  This tip is old and, while still true, the 3.5 server provides a better
  solution: Use the data_root configuration parameter in dap-server.rc. See
  the section on the Configuration File for more information... 

  By default many servers disable soft (symbolic) links that point out of
  the directories that fall under the web server's document root.  This is
  not done for inconvenience, it is a security feature (really).  To disable
  this feature, and allow links to other directories, you'll have to edit
  the httpd.conf file, and add the `FollowSymLinks' option to the directory
  trees which will contain the links to data. This sounds more complex than
  it is.

  For example, suppose that you have a large dataset stored in a directory
  named `/archive1'. Under that directory are many files and taken together
  they are far too large to copy into the WWW server's document root. First
  look in access.conf and see that FollowSymLinks is set for the WWW server's
  document root. It will look like:

    <Directory /usr/local/spool/http>
    Options Indexes FollowSymLinks

  There may be some blank lines and comments between the two.  If
  `FollowSymLinks' is not on the `Options' line, add it, just like in the
  example above. Once that is done, create a symbolic link from within your
  WWW server's document root to `/archive1' (use `ln -s'). You're done.

Tip 4: How do I write a URL for some archive's data?

  One question about your server you will likely be asked is "How do I
  write one of those URLs for your data?". Here's how to answer that
  question. The URLs have the form:

    http://<machine name>/<cgi dir name>/<pathname>

  Suppose that you have copied the HDF server to /var/www/opendap
  and soft linked a set of files in /var/www/html/data/hdf on the machine
  `test.opendap.org'. Also suppose a partial directory listing of that is:

    S2000415.HDF
    S1700101.HDF.gz
    S3096277.HDF.Z

  A URL that references the first file would be:
  
    http://test.opendap.org/opendap/nph-dods/data/hdf/S2000415.HDF

  The part of the URL that reads `opendap/nph-dods' selects the server and
  the section `data/hdf/S2000415.HDF' chooses the file. Note that the WWW
  server's document root is /var/www/html/ and the files are stored in a
  subdirectory within that named `data/hdf'. On the Web URLs, are rooted at
  the DocumentRoot directory so the `/var/www/html/' part of the pathname is
  implicit and should not be part of the URL. Since the directory `data/hdf'
  is under the document root directory it *is* included in the URL.

Tip 5: How do I add additional descriptive information about my dataset?

  The best way is to use the `usage' service.  This service returns
  information to the client about the server, but it can also return an HTML
  document you write to describe your server or any dataset served.

  To describe any special features of a particular data server, write an
  HTML document describing that server, and put it in a file named
  <root>.html in the cgi-bin directory that holds the server programs. The
  only special thing about this file is that you should include only those
  HTML tags that would fall between the <body> and </body> tags. Thus it
  should not contain the <html> <head> <body> or their matching
  counterparts.

  To provide HTML for a class of files you'd create an HTML file whose name
  is based on the names of the data files you want to describe. For example,
  a file that would be used for all the HDF files used in the previous
  section's example would be S.html. This file should be located in the
  directory where the data is located.  You could also create an S20004.html
  and an S20005.html to distinguish between the different sets of HDF files.

  Users access this information by appending `.html' to a URL. For example to
  get the HTML page for the URL used in the previous section, you'd type:

    http://test.opendap.org/opendap/nph-hdf/data/hdf/S2000415.HDF.html

  Note: the Usage server will return important information about your data
    set even if you do not write custom HTML files for it. IF you do write
    those files they will be concatenated with the default information
    returned by the usage server.

Tip 6: How do I set up a server that limits access to only a few people?

  Briefly, it is fairly easy in practice to set up servers so that only a
  particular group can access data using them. The specific mechanisms you
  have at your disposal will depend on the WWW server you use. See the file
  README-security (found in the DODS/etc directory) for information on
  installing `secure'servers with Apache.

Tip 7: Is there a registry of datasets?

  You can register your data set(s) with the us using our web page. Goto
  http://www.opendap.org/data/addtolist.html. Our list of available datasets
  can be found under the 'support' heading of our web page by following the
  'Sources of data' link in the left-hand panel. There's also a link to the
  list of data sources on the front-page left-hand panel.

  You can also register your dataset with the Global Change Master Directory
  (http://gcmd.gsfc.nasa.gov/); they maintain a list registered
  DODS/NVODS/OPeNDAP data sets.

  The GCMD has a special portal dedicated to datasets accessible using OPeNDAP
  servers at http://gcmd.gsfc.nasa.gov/Data/portals/dods/.

Tip 8: Customizing the Directory response (from Joe McLean)

  After messing around with Apache for a few hours, I have found some
  configuration directives that may be of use in beautifying the
  appearance of a directory on your user's Browser.

  example: http://ferret.pmel.noaa.gov/cgi-bin/nph-dods/data/PMEL/

  In your Apache httpd.conf file add the following:

  <Directory /path-to-dods(without cgi-bin or nph-dods)/data>
      Options +Indexes +FollowSymLinks
      IndexOptions FancyIndexing
      IndexOptions +FoldersFirst +NameWidth=* +IgnoreCase
      IndexOptions +SuppressDescription
      DefaultIcon /path-to-icons/dods.gif
      IndexOptions +IconHeight=20 +IconWidth=20
  </Directory>

  I copied the dods logo from upper left hand corner of
  http://www.unidata.ucar.edu/packages/dods/home/getStarted/
  called it dods.gif and stuck it in my apache icons directory
  (in httpd.conf grep for Icon - something should show you the path)

  Information for Apache
  IndexOptions: http://httpd.apache.org/docs/mod/mod_autoindex.html#indexoptions

  Options: http://httpd.apache.org/docs/mod/core.html#options

  DefaultIcon: http://httpd.apache.org/docs/mod/mod_autoindex.html#defaulticon

More Questions

  There are several sources of further information about DODS/NVODS/OPeNDAP:

    o The OPeNDAP home page: http://www.opendap.org/.

    o The users manual, available in HTML and PDF, on the home page.

    o User support by email: support@unidata.ucar.edu
