# $Id: Makefile.in,v 1.40 1999/05/27 19:21:48 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplied by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

# The library libdap++.a contains the code for the generation of the DAS and
# DDS structures plus the code for data transmission and the GNU libg++.a
# classes Map, Stack, Plex and Vec.
# geturl is a simple program that uses the dap++ library plus others to fetch
# a url. In addition it can read and process DAS and DDS objects, displaying
# the print representation on the screen.

LOADDODS = loaddods.mex*
PROG = writeval asciival urlqueue

DODS_ROOT = ../..
MATLAB_ROOT = @MATLAB_ROOT@
WWW_ROOT=@WWW_ROOT@

INCS = -I. -I$(DODS_ROOT)/include -I$(MATLAB_ROOT)/extern/include @INCS@
DEFS = @DEFS@ -DVERSION=\"@VERSION@\" -DUSE_LIBGXX_INLINES
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@ -L. -L$(DODS_ROOT)/lib
LFLAGS = -8
YFLAGS = -d
LIBS = -ldap++ @LIBS@
MAT_LIBS = -ldap++ @MATLIBS@ @LIBS@
TAGS_FLAGS = --include=../dap/TAGS
TEST_COV_FLAGS = -ftest-coverage -fprofile-arcs
CMEXFLAGS = -g $(CFLAGS) $(CPPFLAGS) @MAT_VERSION_FLAG@

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

src = $(DODS_ROOT)/src
etcdir = $(DODS_ROOT)/etc

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
version = @VERSION@
dir = writeval-@VERSION@

COMPONENT_NAME = DODS Matlab Command Line Client

# testsuite specifics
RUNTEST = runtest
RUNTESTFLAGS = #--all --verbose

# names of key programs

LN_S = @LN_S@
CP = cp
AWK = @AWK@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
STRIP = strip
CMEX = $(MATLAB_ROOT)/bin/cmex

CLIENTSRCS = ClientByte.cc ClientInt32.cc ClientFloat64.cc ClientStr.cc \
	ClientUrl.cc ClientArray.cc ClientStructure.cc ClientList.cc \
	ClientSequence.cc ClientGrid.cc ClientUInt32.cc \
	ClientInt16.cc ClientUInt16.cc ClientFloat32.cc

CLIENTOBJS = ClientByte.o ClientInt32.o ClientFloat64.o ClientStr.o \
	ClientUrl.o ClientArray.o ClientStructure.o ClientList.o \
	ClientSequence.o ClientGrid.o ClientUInt32.o \
	ClientInt16.o ClientUInt16.o ClientFloat32.o

ASCIISRCS = AsciiByte.cc AsciiInt32.cc AsciiFloat64.cc AsciiStr.cc \
	AsciiUrl.cc AsciiArray.cc AsciiStructure.cc AsciiList.cc \
	AsciiSequence.cc AsciiGrid.cc AsciiUInt32.cc \
	AsciiInt16.cc AsciiUInt16.cc AsciiFloat32.cc

ASCIIOBJS = AsciiByte.o AsciiInt32.o AsciiFloat64.o AsciiStr.o \
	AsciiUrl.o AsciiArray.o AsciiStructure.o AsciiList.o \
	AsciiSequence.o AsciiGrid.o AsciiUInt32.o \
	AsciiInt16.o AsciiUInt16.o AsciiFloat32.o

WV_SRCS = write_val.cc name_map.cc attributes.cc

WV_OBJS = write_val.o name_map.o attributes.o

AV_SRCS = ascii_val.cc name_map.cc

AV_OBJS = ascii_val.o name_map.o

LD_SRCS = loaddods.c variable.c queue.c extend.c error.c

# Leave out loaddods.o; I pass loaddods.c to cmex so it'll know we're doing C
# code and not complain. 5/27/99 jhrg
LD_OBJS = variable.o queue.o extend.o error.o

URLQ_SRCS = urlqueue.c queue.c

URLQ_OBJS = urlqueue.o queue.o

ALLSRCS = $(CLIENTSRCS) $(ASCIISRCS) $(WV_SRCS) $(AV_SRCS) 

all: $(PROG) loaddods

writeval: $(WV_OBJS) $(CLIENTOBJS)
	$(CXX) $(LDFLAGS) -o writeval $(WV_OBJS) $(CLIENTOBJS) $(LIBS)

asciival: $(AV_OBJS) $(ASCIIOBJS)
	$(CXX) $(LDFLAGS) -o asciival $(AV_OBJS) $(ASCIIOBJS) $(LIBS)

loaddods: $(LD_OBJS)
	$(CMEX) $(CMEXFLAGS) loaddods.c $(LD_OBJS)

urlqueue: $(URLQ_OBJS)
	$(CC) $(LDFLAGS) -o urlqueue $(URLQ_OBJS)

extend: 
	$(CC) -DTEST $(CFLAGS) $(CPPFLAGS) -c extend.c
	$(CMEX) $(CMEXFLAGS) -g extend.o

# Standard targets with some customization for das-test and dds-test

install: install-client

install-client: urlqueue writeval asciival $(LOADDODS)
	$(INSTALL_PROGRAM) urlqueue $(bindir)
	$(INSTALL_PROGRAM) posturl.pl $(etcdir)
	$(INSTALL_PROGRAM) -s writeval $(bindir)
	$(INSTALL_PROGRAM) -s asciival $(etcdir)
	$(INSTALL_PROGRAM) loaddods.mex* $(bindir)
	$(INSTALL_PROGRAM) loaddods.m $(bindir)
	$(INSTALL_PROGRAM) whodods.m $(bindir)
	$(INSTALL_DATA) INSTALL-matlab-client $(etcdir)

Makefile: ${srcdir}/Makefile.in
	${SHELL} ./config.status

config_writeval.h: config_writeval.h.in
	${SHELL} ./config.status

# Tests

check: asciival asciival-check writeval writeval-check 

writeval-check: writeval
	${RUNTEST} ${RUNTESTFLAGS} --tool writeval --srcdir testsuite

asciival-check: asciival
	${RUNTEST} ${RUNTESTFLAGS} --tool asciival --srcdir testsuite

loaddods-check: writeval variable.o queue.o
	$(CC)  -c -g $(CFLAGS) $(CPPFLAGS) -DTEST_LOADDODS loaddods.c
	$(CC)  -c -g $(CFLAGS) $(CPPFLAGS) -DTEST_LOADDODS extend.c
	$(CC) $(LDFLAGS) -g -o test-ldods loaddods.o variable.o queue.o \
		extend.o -lefence -lmx
	-rm loaddods.o extend.o

test-coverage: clean
	$(MAKE) $(MFLAGS) CXXFLAGS="$(CXXFLAGS) $(TEST_COV_FLAGS)" check

# Note that the gcov options -f and -b are useful but sometimes make looking
# at the results of coverage analysis a little taxing. -b reports on all
# branched and -f reports on all functions. The -l -o options summarize on a
# per-file basis. 3/27/98 jhrg
collect-coverage-data:
	(cd test-coverage; \
         cov_dat="coverage-data-`date +%m.%d.%y`"; \
	 touch $$cov_dat; \
	 for f in $(ALLSRCS); do \
	     echo "\n*** Coverage data for $$f ***\n" >> $$cov_dat; \
	     gcov -l -o ../ $$f >> $$cov_dat; \
         done)

PURIFY = purify $(CC) 

loaddods-purify: writeval variable.o queue.o
	$(CC)  -c -g $(CFLAGS) $(CPPFLAGS) -DTEST_LOADDODS loaddods.c
	$(CC)  -c -g $(CFLAGS) $(CPPFLAGS) -DTEST_LOADDODS extend.c
	$(PURIFY) $(LDFLAGS) -g -o test-ldods loaddods.o variable.o queue.o \
		extend.o -lmx
	-rm loaddods.o extend.o

# these tests all fail when das-test is linked with -lnew_debug.

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f $(PROG) $(LOADDODS)

distclean: clean
	-rm -f config.status config.log config.cache

.PHONY: docs
docs:
	doc++ -d docs -f $(CLIENTSRCS) $(ASCIISRCS) $(WV_SRCS) $(AV_SRCS) \
		$(LD_SRCS) $(URLQ_SRCS)

.PHONY: depend
depend: 
	> dependencies
	@depend@ -m dependencies \
	-- $(CPPFLAGS) -I@GPP_INC@ -- \
	$(CLIENTSRCS) $(WV_SRCS) $(LD_SRCS) $(URLQ_SRCS)

# This is a special tar target because it builds not only the tar file for
# the core software but also the lib, etc, and bin directories. It assumes
# that the root directory for DODS is called `DODS' (no version number).
.PHONY: tar
tar:
	-rm -r config.cache config.log config.status
	cd $(DODS_ROOT)/.. && \
	tar --exclude '*/old' --exclude '*/.#*' --exclude '*/CVS' \
	    --gzip --create --dereference --file DODS-$(dir).tar.gz \
	    DODS/src/$(dir)

.PHONY: update-version
update-version: check-version
	@echo "Version is: `cat version.h`"
	mv ../writeval* ../writeval-$(version)
	touch $(DODS_ROOT)/VERSION; cat $(DODS_ROOT)/VERSION | \
	  $(AWK) ' \
	    BEGIN { found = 0 } \
	    { if ( $$0 ~ /^$(COMPONENT_NAME):/) \
	        { print "$(COMPONENT_NAME): $(version)"; found = 1 } \
	      else { print $$0 } } \
	    END { if ( ! found) { print "$(COMPONENT_NAME): $(version)" } \
	        }' > $(DODS_ROOT)/VERSION

# Compare the version encoded in this Makefile (set by configure) with the
# version in version.h. The version make variable is set up near the top of
# the Makefile.
.PHONY: check-version
check-version:
	@echo "Checking for version.h and Makefile version match-up"
	@if [ "$(version)" != "`cat version.h`" ]; \
	then \
		echo "You must manually re-run configure!"; \
		exit 1; \
	else \
		echo "Yes, they match."; \
	fi

.PHONY: tags
tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h *.c

.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

include dependencies

