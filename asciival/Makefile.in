
# $Id: Makefile.in,v 1.8 1996/11/23 00:03:57 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplied by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

# The library libdap++.a contains the code for the generation of the DAS and
# DDS structures plus the code for data transmission and the GNU libg++.a
# classes Map, Stack, Plex and Vec.
# geturl is a simple program that uses the dap++ library plus others to fetch
# a url. In addition it can read and process DAS and DDS objects, displaying
# the print representation on the screen.

PROG= writeval loaddods urlqueue
DODS_ROOT = ../..

WWW_ROOT=@WWW_ROOT@
INCS = -I. -I$(DODS_ROOT)/include -I$(MATLAB_ROOT)/extern/include @INCS@
DEFS = @DEFS@ -DUSE_LIBGXX_INLINES
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@ -L. -L$(DODS_ROOT)/lib
LFLAGS = -8
YFLAGS = -d
LIBS = -ldap++ -lwww @LIBS@
TAGS_FLAGS = -b
CMEXFLAGS = 
MATLAB_ROOT = @MATLAB_ROOT@

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

src = $(DODS_ROOT)/src
etcdir = $(DODS_ROOT)/etc

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
# VPATH = 
dir = @dir@

# testsuite specifics
RUNTEST = runtest
RUNTESTFLAGS = #--all --verbose

# names of key programs

LN_S = @LN_S@
CP = cp
AWK = @AWK@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
STRIP = strip
CMEX = $(MATLAB_ROOT)/bin/cmex

CLIENTSRCS = ClientByte.cc ClientInt32.cc ClientFloat64.cc ClientStr.cc \
	ClientUrl.cc ClientArray.cc ClientStructure.cc ClientList.cc \
	ClientSequence.cc ClientFunction.cc ClientGrid.cc ClientUInt32.cc

CLIENTOBJS = ClientByte.o ClientInt32.o ClientFloat64.o ClientStr.o \
	ClientUrl.o ClientArray.o ClientStructure.o ClientList.o \
	ClientSequence.o ClientFunction.o ClientGrid.o ClientUInt32.o

all: $(PROG)

writeval: write_val.o name_map.o $(CLIENTOBJS)
	$(CXX) $(LDFLAGS) -o writeval write_val.o name_map.o \
		$(CLIENTOBJS) $(LIBS)

loaddods: loaddods.o variable.o startchild.o queue.o
	$(CMEX) $(CMEXFLAGS) loaddods.o variable.o startchild.o queue.o


urlqueue: urlqueue.o queue.o
	$(CC) $(LDFLAGS) -o urlqueue urlqueue.o queue.o

# Standard targets with some customization for das-test and dds-test

install: install-client

install-client: urlqueue writeval loaddods
	$(INSTALL_PROGRAM) urlqueue $(etcdir)
	$(INSTALL_PROGRAM) posturl.pl $(etcdir)
	$(INSTALL_PROGRAM) writeval $(bindir)
	$(INSTALL_PROGRAM) loaddods.mex* $(bindir)

Makefile: ${srcdir}/Makefile.in
	${SHELL} ./config.status

check:

# these tests all fail when das-test is linked with -lnew_debug.

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f $(PROG) loaddods.mex*

distclean: clean
	-rm -f config.status config.log config.cache

tar:
	cd .. && tar --exclude $(dir)/old --gzip -c -f $(dir).tar.gz $(dir) &&\
		cd $(dir)

tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h *.lex *.y

.PHONY: depend
depend: 
	@depend@ -m dependencies \
	-- $(CPPFLAGS) -I/usr/local/lib/g++-include -- \
	$(CLIENTSRCS) write_val.cc name_map.cc

.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

include dependencies

