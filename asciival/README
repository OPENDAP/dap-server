
 $Id: README,v 1.11 1997/06/23 18:31:52 jimg Exp $

The following provides background technical information on the design of
loaddods/writeval. For installation information, see the file
INSTALL-matlab-client and for help using the matlab command `loaddods', see
the on-line help for that command (in Matlab type `help loaddods'). Make sure
that the file loaddods.m is in the same directory as the loaddods.mex*
program.

There are two programs that comprise the DODS-Matlab command line interface;
loaddods and whodods. They are analogous to Matlab's load and who commands.
However, they accept DODS URLs rather than Matlab files. On-line help is
available for both commands - make sure that you have the loaddods.m,
loaddods.mex* and whodods.m file in a directory that Matlab will search for
binaries.

Here is a summary of the software in the entire DODS Matlab client (including
parts that users don't see and optional parts):

1) loaddods; A cmex program run by Matlab. This program must be on a
directory Matlab search when looking for command files. It can be placed in
either a user's directory for scripts and extensions or in a system-wide
directory.

loaddods accepts several command line switches some of which are listed below:
   -V to get the version of loaddods. 
   -g to activate the GUI.
   +v to turn off verbose mode (it is on by default). 

When called with a command switch, you must give that switch first and it
must be quoted. E.G.: loaddods('-g', 'http://...'). See the online help file
for the complete list of switches.

loaddods can be used in four ways:

a) When run with a URL as its argument the program assumes that the URL is a
fully qualified DODS URL and invokes writeval to get the associated data,

b) If loaddods is run with `*' or '?' as its argument, the program will start
Netscape and open the DODS locator main page,

c) A URL prefixed by a `*' or `?' will be passed to netscape and used as an
alternative data locator page.

d) With no argument at all, loaddods waits for a URL to be sent via a WWW
browser.

loaddods is a very flexible program since you can use it with a URL
saved or cut from some other source, with the HTML interface we have built,
with some other interface or after you have found some data with the browser.

2) writeval; Dereferences a DODS URL and returns a mixed ASCII and binary
stream of data. loaddods calls writeval to perform the actual data fetch so
this program must be in a directory on the user's PATH or in DODS_ROOT/etc.
Note that you can set DODS_ROOT as a shell variable *or* use the value
compiled into the software. While this program was originally intended to be
used with loaddods, it can also be used for other purposes as well. For
example a user could save binary data to a file with writeval. Note that with
the `-f' option writeval translates all simple types to either Float64 or
String.

writeval can also be used to read from standard input, write ASCII output and
access the DDS for a given dataset. See the online help for information about
these options. 

3) urlqueue; A helper application for Netscape (or other WWW browser) which
passes information from a browser to another program such as loaddods. 

4) posturl.pl; Users do not need to have this on their system. It is included
here for completeness. However, if users want to write their own HTML forms
for building URLs then they can install and use their own copy of posturl and
make a completely self contained system.

5) whodods; print the Dataset Descriptor Structure for the URL. This provides
a way to look at the structure of a dataset without leaving Matlab. It can be
thought of as a simple alternative to the HTML-based GUI (although users
don't need to leave Matlab to use that either...).

------------

Here is a pseudo grammar describing the output of writeval. I used * as the
Kleene closure (zero or more) and + as one or more. The idea is simple; write
the type and name of the variable each on one line and data for it on the
following line. For ctor types it becomes more complex, but not much. For
arrays write Array, newline, the type, the name, the number of dimensions,
newline, a list of dimension sizes, newline and the data. Finish by writing a
newline.

While this means sending out some extra charaters it makes the output of
writeval very simple to parse.

<data request> :: <variable>*

<simple variable> :: <variable name> '\n'

<array variable> :: <variable type> ' ' <variable name> ' ' <number of dims> '\n'
		    <dim size>+ 

<list variable> :: <variable type> <variable name> <list size>

<struct variables> :: <variable name> <num of elements> '\n' 
		      (<variable> '\n' <data> '\n')+

<sequence variables> :: <variable name> <num of elements> '\n' 
			(<variable> '\n' <data> '\n')+

<grid variables> :: <variable name> '\n' 'array 1\n' <array variable>
		    'map <num of arrays>\n' (<array variable>)+ 

<variable> :: Byte '\n' <simple variable> '\n' <data> '\n'
	   :: Int32 '\n' <simple variable> '\n' <data> '\n'
	   :: Float64 '\n' <simple variable> '\n'  <data> '\n'
	   :: String '\n' <simple variable> '\n' <data> '\n'
	   :: Url '\n' <simple variable> '\n' <data> '\n'

	   :: Array '\n' <array variable> '\n' <data> '\n'
	   :: List '\n' <list variable> '\n' <data> '\n'

	   :: Structure '\n' <struct variables>
	   :: Sequence '\n' <sequence variables>
	   :: Function '\n' <function variables>
	   :: Grid '\n' <grid variables>

James Gallagher 10/4/96
