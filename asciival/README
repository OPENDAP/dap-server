
 $Id: README,v 1.7 1996/10/30 00:10:23 jimg Exp $

There are four executables used in the DODS-Matlab interface:

1) loaddods; A cmex program run by Matlab. This program must be accessible to
Matlab. It can be placed in either a user's directory for scripts and
extensions or in a system-wide directory. loaddods can be used in four ways:

a) when run with a URL as its argument the program assumes that the URL is a
fully qualified DODS URL and invokes writeval to get the associated data,

b) if loaddods is run with `*' or '?' as its argument, the program will start
Netscape and open the DODS locator main page,

c) a URL prefixed by a `*' or `?' will be passed to netscape and used as an
alternative data locator page, and

NB: Since the URL builder is not yet complete these options have limited
utility. 

d) with no argument at all, loaddods waits for a URL to be sent via a WWW
browser.

Thus loaddods is a very flexible program since you can use it with a URL
saved or cut from some other source, with the HTML interface we have built,
with some other interface or after you have found some data with the browser.

2) writeval; Dereferences a DODS URL and returns a binary stream of data.
This can be installed anywhere on the system, but its path is hard coded into
the loaddods program so unless you want to modify the loaddods source code it
should be placed in the same directory as loaddods. While this program is
used by loaddods, it could be used for other purposes as well. For example a
user could save binary data to a file with writeval. Note that with the `-f'
option writeval translates all simple types to either Float64 or String.

3) urlqueue; A helper application for Netscape (or other WWW browser) which
passes information from a browser to another program such as loaddods. The
file `mailcap' contains a sample mailcap file entry for the helper
application.

4) posturl.pl; Users do not need to have this on their system. It is included
here for completeness. However, if users want to write their own HTML forms
for building URLs then they can install and use their own copy of posturl and
make a completely self contained system.

------------

Here is a pseudo grammar describing the output of writeval. I used * as the
Kleene closure (zero or more) and + a one or more. Basically, the idea is
simple; write the type and name of the variable on one line and data for it
on the next. For ctor types it becomes more complex, but not much. For arrays
write Array, the type, the name, the number of dimensions and a list of
dimension sizes on one line and the data on the next line. 

<data request> :: <variable>*

<simple variable> :: <variable name> '\n'

<array variable> :: <variable type> <variable name> <number of dims> 
		    <dim size>+ 

<list variable> :: <variable type> <variable name> <list size>

<struct variables> :: <variable name> <num of elements> '\n' 
		      (<variable> '\n' <data> '\n')+

<sequence variables> :: <variable name> <num of elements> '\n' 
			(<variable> '\n' <data> '\n')+

<grid variables> :: <variable name> '\n' 'array 1\n' <array variable>
		    'map <num of arrays>\n' (<array variable>)+ 

<variable> :: Byte ' ' <simple variable> '\n' <data> '\n'
	   :: Int32 ' ' <simple variable> '\n' <data> '\n'
	   :: Float64 ' ' <simple variable> '\n'  <data> '\n'
	   :: Str ' ' <simple variable> '\n' <data> '\n'
	   :: Url ' ' <simple variable> '\n' <data> '\n'

	   :: Array ' ' <array variable> '\n' <data> '\n'
	   :: List ' ' <list variable> '\n' <data> '\n'

	   :: Structure ' ' <struct variables>
	   :: Sequence ' ' <sequence variables>
	   :: Function ' ' <function variables>
	   :: Grid ' ' <grid variables>

James Gallagher 10/4/96