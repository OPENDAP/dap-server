
# Tcl/Expect code for the writeval test.
# 
# $Id: unix.exp,v 1.2 1998/11/21 01:31:22 jimg Exp $

# Make sure the global var WRITEVAL is set correctly.

global WRITEVAL
if ![info exists WRITEVAL] then {
    set WRITEVAL [transform writeval]
}

# Compare $expected to the global $comp_output. Run `pass' if they match,
# `fail' otherwise unless `xfailp' is true in which case run `xfail' if they
# do not match. $msg is the name of the test to print when calling pass, fail
# or xfail.
# 
# NB: $expected may be either a string or a file name. If it is the latter,
# read the file and compare its contents to $comp_output.

proc compare_stdout {expected msg {xfailp 0} {str_test compare}} {
    global comp_output
    global verbose

    # If $expected is the name of a file, read that file's contents and store
    # in $expected, then procede to compare $expected to $comp_output.

    if {[file exists $expected] && [file isfile $expected]} {
	if {$verbose >= 1} {
	    send_user "PWD: [pwd]\n"
	    send_user "Reading file: $expected\n"
	}
	set fd [open $expected r]
	# Trim is used here to remove trailing `\n's from files of data.
	set expected [read $fd]
	close $fd
    }

    set expected [string trim $expected]
    set comp_output [string trim $comp_output]

    if ![string $str_test $expected $comp_output] {
	pass "$msg"
	send_user "PASS: $msg\n"
    } elseif {$xfailp == 1} {
	xfail "$msg"
	send_user "XFAIL: $msg\n"
    } else {
	fail "$msg"
    }

    if {$verbose >= 1} {
	send_user "Comp output:$comp_output\n"
	send_user "Expected output:$expected\n"
    }
}

# The four `required' procs are _start, _load, _exit and _version.

proc writeval_start { {switches ""} {urls ""} {file ""}} {
    global verbose
    global WRITEVAL
    global comp_output
    global spawn_id

    if ![string compare $file ""] {
	if {$verbose >= 1} {
	    send_user "Testing writeval $switches -- $urls ...\n"
	    exp_internal 1
	}
	catch "exec $WRITEVAL $switches -- $urls" comp_output
    } else {
	if {$verbose >= 1} {
	    send_user "Testing writeval $switches -- $urls >& $file ...\n"
	    exp_internal 1
	}
	catch "exec $WRITEVAL $switches -- $urls > $file" comp_output
    }
}

proc writeval_load {} {
}

proc writeval_exit {} {
    send -raw ""
}

proc writeval_version {} {
    send_user "writeval test suite 1.0\n"
}

