
Updated for version 3.5.3

ASCII returns for entire data source (i.e., with an empty Constraint 
expression) were failing. Fixed.

There were packaing problems with the included HTML Parser code. Fixed.

New to this distribtion in the opendap_apache.conf file. Edit this, replacing
<<prefix>> with the installaion prefix for your code and drop the file into 
Apache's configuration file directory (/etc/httpd/conf.d on many linux 
distributions) and restart Apache. No need to edit your main httpd.conf file!

Updated for version 3.5.2

A bug in the HTML form and info response generators caused global attributes 
to be 'lost.'

Support for bzip2 compression was added to the server. If the gzip and bzip2
tools are not located in /bin or /usr/bin on the server host, edit the file
DODS_Cache.pm so that module will be able to locate them.

Version 3.5.1

Based on some testing I'm switching back to including HTML:Parser in the 
distribution since newer versions don't work with our code. This should be
fixed soon enough (3.6. hopefully).

The version 3.5 server has a very different installation layout than previous
versions. Now only the nph-dods CGI script and its configuration file are
installed in a CGI bin directory. The other files are installed in
/usr/local/share/dap-server and /usr/local/bin. See INSTALL for information
about changing the prefix '/usr/local'.

Also, it's no longer a requirement that data be stored under the WWW daemon's
DocumentRoot. See the section about the configuration parameter 'data_root'
in the README file.

This version of the server will pass off a request for the DDX response to 
the format handlers. Currently only the hdf4 and NetCDF handlers can return
the response, the others return an error. This feature and the DDX objects
themselves are prototype versions. We may change the design before releasing 
a final version.

Bug fixes

* The compiled server binaries are no longer installed in $prefix/sbin but in
$prefix/bin.

* The ASCII and HTML responses are now built using local calls to the file
system instead of network calls to the server. This means that those
responses are more efficient and that secure servers are easier to configure.
The additional step of opening access to he server for the localhost to
enable these two reponses is no longer needed. Unfortunately, the directory
response still makes a call to the server, so support for that feature will
still require the additional configuration. See README-security and the FAQ
for information about setting up a secure server
(http://www.opendap.org/faq/server_security.html).

All executables are now prefixed with 'dap_' to avoid situations where other
packages use the same names (as was the case with 'usage').

Updated for version 3.5.0

* Server 3.5 is an update for the current CGI-based server whose dispatch code
is written using Perl. The code is still Perl :-( but will have several
enhancements suggested/implemented by various people over the past few
months.

* This version of the OPeNDAP server is built and distributed separately from
the libdap library.

* The server's configuration file is now named 'dap-server.rc.' We're going
to keep the name 'nph-dods' so that existing links don't break. People
upgrading servers should take their dods.rc file and make sure any
customizations ae addedd to dap-server.rc.

* Only the nph-dods script and dap_server.rc files will be installed in the
cgi binary directory. The remainder of the Perl and the 'helper' programs are
now stored elsewhere. This makes it much harder for people to hack the
servers and also makes setting up several servers at one site simpler. This
design change was suggested by John Allison at UCAR, I think, and I don't
know why it has take me so long to release a version of the server that
employs it... Others may have also suggested this and I was just to thick to
pick up on it. ;-)

* The code (except for nph-dods and dap_server.rc) now installs in regular
directories as you'd expect with Unix/Linux. The Perl code installs in
/usr/local/share/dap and the C++/C binaries install in /usr/local/sbin by
default, although you can change this easily).

* The server no longer requires data providers to use the web daemon's
DocumentRoot as the root of the data. Instead the 'data root' is set from
within the dap_server.rc file. This will make setting up secure servers simpler
since it's no longer necessary to make two security configurations for the
data. The old design where data security is based on securing the server is
still the model used by this server, but at least the management of that has
been cut in half. This was suggested by Neil Killeen at CSIRO. Note that if
data_root is not set in the dap_server.rc file, the old behavior is used as a
default. Thus existing sites don't need to mess with this at all; those
configurations will continue to use DocumentRoot as the root of the data.

* The server now uses a smaller number of helper applications, which I've
called 'handlers' to process different types of files. Instead of having
three programs for netCDF, three for HDF, et c., there's now just one handler
for each format. (This was first implemented by Jake Hamby at JPL years ago
and also by Jose Garcia and Patrick West from HAO). These handlers now have
their own CVS/SVN modules and will be used by both this code and Server4.

Still to be done:

* The tools are helper programs that generate the info, ascii and HTML
responses for the server. These have been moved into the server's directory.
However, these programs still make a round-trip to the server to access data.
The next release will fix this and these programs will read directly from the
data sources using the handlers. This will not only speed up generating these
reponses but also simplify security configurations since an extra setup step
where local accesses are allowed for all will then be eliminated.

Changes in version 3.4

The server configuration file dods.ini is now called dods.rc. This name
change brings the file in line with the other configuration files used by
OPeNDAP software. Previously the configuration file was just used to match
'handler' programs to data source (usually files). However, with the 3.4
release we've migrated all the configuration information into this file
(except for the experimental statistics software). The dods.rc file has
comments which explain the various paramters.

We've reduced our dependence on some Perl modules by replacing them with a
compiled (C++) program called 'curl.' If you're upgrading a server, make sure
you get this or features like ASCII and HTML responses will not work.

We have had some issues in the past with serving data from files that are
compressed using UNIX compress or gzip. See the special section below about
serving these types of files for important configuration information!

$Id$
