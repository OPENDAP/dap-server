
# $Id: Makefile.in,v 1.8 2000/11/09 21:04:37 jimg Exp $

@SET_MAKE@

# Set makefile variables, some with values supplied by configure 
# DEFS gets the `-D' defines that describe what a particular system has
# or doesn't have.

PROG = www_int

DODS_ROOT = ../../..
WWW_ROOT=@WWW_ROOT@

INCS = -I. -I$(DODS_ROOT)/include @INCS@
DEFS = @DEFS@ -DWWW_INT_VER=\"@VERSION@\"
CPPFLAGS = @CPPFLAGS@ $(DEFS) $(INCS)
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@ -L. -L$(DODS_ROOT)/lib
LFLAGS = -8
YFLAGS = -d
LIBS = -ldap++ @LIBS@
TEST_COV_FLAGS = -ftest-coverage -fprofile-arcs
TAGS_FLAGS = --include=../../dap/TAGS

# Set the instalation directories; prefix can be set on the command line
# during Makefile construction with `./configure --prefix /my/choice'

prefix = @prefix@
exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir = $(prefix)/include
manext = 1
mandir = $(prefix)/man/man$(manext)

src = $(DODS_ROOT)/src
etcdir = $(DODS_ROOT)/etc

INSTALLMAN = man

SHELL = /bin/sh
srcdir = @srcdir@
version = @VERSION@
basedir = www-interface
dir = $(basedir)-$(version)

# testsuite specifics
RUNTEST = runtest
RUNTESTFLAGS = #--all --verbose

# names of key programs

LN_S = @LN_S@
CP = cp
AWK = @AWK@
TAR = @TAR@
CC = @CC@
CXX = @CXX@
YACC = @YACC@
LEX = @LEX@
AR = ar
TAGS = etags
RANLIB = @RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
STRIP = strip

CLIENTSRCS = WWWByte.cc WWWInt32.cc WWWFloat64.cc WWWStr.cc \
	WWWUrl.cc WWWArray.cc WWWStructure.cc WWWList.cc \
	WWWSequence.cc WWWGrid.cc WWWUInt32.cc \
	WWWInt16.cc WWWUInt16.cc WWWFloat32.cc WWWOutput.cc

CLIENTOBJS = WWWByte.o WWWInt32.o WWWFloat64.o WWWStr.o \
	WWWUrl.o WWWArray.o WWWStructure.o WWWList.o \
	WWWSequence.o WWWGrid.o WWWUInt32.o \
	WWWInt16.o WWWUInt16.o WWWFloat32.o WWWOutput.o

WWW_INT_SRCS = www_int.cc
WWW_INT_OBJS = www_int.o

ALLSRCS=$(CLIENTSRCS) $(WWW_INT_SRCS)

all: $(PROG)

javascript.h: javascript.h.tmpl
	process_js_tmpl.pl $< > $@

www_int: $(WWW_INT_OBJS) $(CLIENTOBJS)
	$(CXX) $(LDFLAGS) -o www_int $(WWW_INT_OBJS) $(CLIENTOBJS) $(LIBS)

# Standard targets with some customization for das-test and dds-test

install: install-client

install-client: www_int
	$(INSTALL_PROGRAM) -s www_int $(etcdir)

check: 
	@echo "No tests"

test-coverage: clean
	$(MAKE) $(MFLAGS) CXXFLAGS="$(CXXFLAGS) $(TEST_COV_FLAGS)" check

# Note that the gcov options -f and -b are useful but sometimes make looking
# at the results of coverage analysis a little taxing. -b reports on all
# branched and -f reports on all functions. The -l -o options summarize on a
# per-file basis. 3/27/98 jhrg
collect-coverage-data:
	(cd test-coverage; \
         cov_dat="coverage-data-`date +%m.%d.%y`"; \
	 touch $$cov_dat; \
	 for f in $(ALLSRCS); do \
	     echo "\n*** Coverage data for $$f ***\n" >> $$cov_dat; \
	     gcov -l -o ../ $$f >> $$cov_dat; \
         done)

# these tests all fail when das-test is linked with -lnew_debug.

clean:	
	-rm -f *.o *.sum *.log *~ core
	-rm -f $(PROG)

distclean: clean
	-rm -f config.status config.log config.cache

.PHONY: docs
docs:
	doc++ -d docs -f $(ALLSRCS)

configure: configure.in
	autoconf --localdir=$(DODS_ROOT)/etc

Makefile: Makefile.in
	if [ -x ./config.status ]; \
	then \
	    ${SHELL} ./config.status; \
	else \
	    ./configure; \
	fi

.PHONY: depend
depend: 
	@depend@ -m Makefile.in -- $(CPPFLAGS) -- $(ALLSRCS)
	$(MAKE) $(MFLAGS) Makefile

.PHONY: update-version
update-version: check-version
	@echo "Version is: `cat version.h`"
	if [ ! -d ../$(dir) ]; then \
	    mv ../$(basedir)* ../$(dir);\
	fi

# Compare the version encoded in this Makefile (set by configure) with the
# version in version.h. The version make variable is set up near the top of
# the Makefile.
.PHONY: check-version
check-version:
	@echo "Checking for version.h and Makefile version match-up"
	@if [ "$(version)" != "`cat version.h`" ]; \
	then \
		echo "You must manually re-run configure!"; \
		exit 1; \
	else \
		echo "Yes, they match."; \
	fi

# This is a special tar target because it builds not only the tar file for
# the core software but also the lib, etc, and bin directories. It assumes
# that the root directory for DODS is called `DODS' (no version number).
.PHONY: tar
tar:
	-rm -r config.cache config.log config.status
	cd $(DODS_ROOT)/.. && \
	$(TAR) --exclude 'old' --exclude '.#*' --exclude 'CVS' \
	    --exclude '.flc' --exclude '.snprj' \
	    --gzip --create --dereference --file DODS-$(dir).tar.gz \
	    DODS/src/tools/$(dir)

binary-tar:
	@echo "This program's binary-tar is made by the src/dap Makefile"

.PHONY: tags
tags:
	$(TAGS) $(TAGS_FLAGS) *.cc *.h

.SUFFIXES:      .o .cc .c

.c.o:
	$(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(CPPFLAGS) -o $@ $<

# DO NOT DELETE; depend depends on this line.
WWWByte.o: WWWByte.cc config_www_int.h InternalErr.h WWWByte.h Byte.h \
 WWWOutput.h BaseType.h DDS.h DAS.h
WWWInt32.o: WWWInt32.cc config_www_int.h InternalErr.h WWWInt32.h \
 Int32.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWFloat64.o: WWWFloat64.cc config_www_int.h InternalErr.h \
 WWWFloat64.h Float64.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWStr.o: WWWStr.cc config_www_int.h InternalErr.h WWWStr.h \
 dods-limits.h Str.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWUrl.o: WWWUrl.cc config_www_int.h WWWUrl.h WWWStr.h dods-limits.h \
 Str.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWArray.o: WWWArray.cc config_www_int.h config_dap.h InternalErr.h \
 WWWArray.h Array.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWStructure.o: WWWStructure.cc config_www_int.h DAS.h InternalErr.h \
 WWWStructure.h Structure.h WWWSequence.h Sequence.h WWWOutput.h \
 BaseType.h DDS.h DAS.h
WWWList.o: WWWList.cc config_www_int.h InternalErr.h WWWList.h List.h
WWWSequence.o: WWWSequence.cc config_www_int.h DAS.h InternalErr.h \
 WWWSequence.h Sequence.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWGrid.o: WWWGrid.cc config_www_int.h Array.h InternalErr.h WWWGrid.h \
 Grid.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWUInt32.o: WWWUInt32.cc config_www_int.h InternalErr.h WWWUInt32.h \
 UInt32.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWInt16.o: WWWInt16.cc config_www_int.h InternalErr.h WWWInt16.h \
 Int16.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWUInt16.o: WWWUInt16.cc config_www_int.h InternalErr.h WWWUInt16.h \
 UInt16.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWFloat32.o: WWWFloat32.cc config_www_int.h InternalErr.h \
 WWWFloat32.h Float32.h WWWOutput.h BaseType.h DDS.h DAS.h
WWWOutput.o: WWWOutput.cc config_www_int.h Regex.h BaseType.h Array.h \
 List.h DAS.h DDS.h InternalErr.h util.h WWWOutput.h BaseType.h DDS.h \
 DAS.h
www_int.o: www_int.cc config_www_int.h BaseType.h Connect.h cgi_util.h \
 WWWOutput.h BaseType.h DDS.h DAS.h javascript.h
